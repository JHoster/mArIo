/*
 * generated by Xtext 2.24.0
 */
package mArIoDSL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mArIoDSL.MyDsl.Model");
		private final Assignment cItemAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemItemParserRuleCall_0 = (RuleCall)cItemAssignment.eContents().get(0);
		
		//Model:
		//	item+=Item*;
		@Override public ParserRule getRule() { return rule; }
		
		//item+=Item*
		public Assignment getItemAssignment() { return cItemAssignment; }
		
		//Item
		public RuleCall getItemItemParserRuleCall_0() { return cItemItemParserRuleCall_0; }
	}
	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mArIoDSL.MyDsl.Item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemIDIDTerminalRuleCall_1_0 = (RuleCall)cItemIDAssignment_1.eContents().get(0);
		private final Assignment cItemNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cItemNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cItemWeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemWeightINTTerminalRuleCall_4_0 = (RuleCall)cItemWeightAssignment_4.eContents().get(0);
		
		//Item:
		//	'Item' ItemID=ID ItemName=STRING description=STRING? ItemWeight=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Item' ItemID=ID ItemName=STRING description=STRING? ItemWeight=INT
		public Group getGroup() { return cGroup; }
		
		//'Item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//ItemID=ID
		public Assignment getItemIDAssignment_1() { return cItemIDAssignment_1; }
		
		//ID
		public RuleCall getItemIDIDTerminalRuleCall_1_0() { return cItemIDIDTerminalRuleCall_1_0; }
		
		//ItemName=STRING
		public Assignment getItemNameAssignment_2() { return cItemNameAssignment_2; }
		
		//STRING
		public RuleCall getItemNameSTRINGTerminalRuleCall_2_0() { return cItemNameSTRINGTerminalRuleCall_2_0; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//ItemWeight=INT
		public Assignment getItemWeightAssignment_4() { return cItemWeightAssignment_4; }
		
		//INT
		public RuleCall getItemWeightINTTerminalRuleCall_4_0() { return cItemWeightINTTerminalRuleCall_4_0; }
	}
	
	
	private final ModelElements pModel;
	private final ItemElements pItem;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pItem = new ItemElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mArIoDSL.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	item+=Item*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Item:
	//	'Item' ItemID=ID ItemName=STRING description=STRING? ItemWeight=INT;
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
